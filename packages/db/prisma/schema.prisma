// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String              @id @default(cuid())
  email               String              @unique
  firstName           String?
  lastName            String?
  password            String
  token               String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  contestsSubmissions ContestSubmission[]
  role                UserRole            @default(USER)
  submissions         Submission[]
  contestsPoints       ContestPoints[]
}

model Contest {
  id                 String              @id @default(cuid())
  title              String
  description        String?
  startTime          DateTime
  endTime            DateTime
  hidden             Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  submissions        Submission[]
  problem            ContestProblem[]
  contestsubmissions ContestSubmission[]
  leaderboard        Boolean             @default(false)
}

model ContestProblem {
  id        String   @id @default(cuid())
  contestId String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  contest   Contest  @relation(fields: [contestId], references: [id])
  problem   Problem  @relation(fields: [problemId], references: [id])
  index     Int
  solved    Int      @default(0)

  @@unique([contestId, problemId])
}

model Problem {
  id                 String              @id @default(cuid())
  title              String
  description        String?
  hidden             Boolean             @default(true)
  slug               String              @unique
  solved             Int                 @default(0)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  difficulty         Difficulty          @default(EASY)
  contestSubmissions ContestSubmission[]
  contests           ContestProblem[]
  submissions        Submission[]
  defaultCode        DefaultCode[]
}

model DefaultCode {
  id         String   @id @default(cuid())
  languageId String
  problemId  String
  code       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  problem    Problem  @relation(fields: [problemId], references: [id])
  language   Language @relation(fields: [languageId], references: [id])

  @@unique([problemId, languageId])
}

model Submission {
  id              String           @id @default(cuid())
  problemId       String
  userId          String
  languageId      String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  code            String
  fullCode        String
  activeContestId String?
  status          SubmissionStatus @default(PENDING)
  testCases       TestCase[]
  memory          Int?
  time            Float?
  activeContest   Contest?         @relation(fields: [activeContestId], references: [id])
  user            User?            @relation(fields: [userId], references: [id])
  language        Language        @relation(fields: [languageId], references: [id])
  problem         Problem          @relation(fields: [problemId], references: [id])
}

model Language {
  id          String        @id @default(cuid())
  name        String
  judge0Id    Int           @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  submission  Submission[]
  defaultCode DefaultCode[]
}

model TestCase {
  id               String         @id @default(cuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  status           TestCaseStatus @default(PENDING)
  index            Int
  submission       Submission     @relation(fields: [submissionId], references: [id])
  submissionId     String
  memory           Int?
  time             Float?
  judge0TrackingId String         @unique
}

model ContestSubmission {
  id          String  @id @default(cuid())
  userId      String
  problemId   String
  contestId   String
  submisionId String
  points      Int
  user        User    @relation(fields: [userId], references: [id])
  problem     Problem @relation(fields: [problemId], references: [id])
  contest     Contest @relation(fields: [contestId], references: [id])

  @@unique([userId, problemId, contestId])
}

model ContestPoints {
  id          String  @id @default(cuid())
  contestId   String
  userId      String
  points      Int
  rank        Int
  user        User    @relation(fields: [userId], references: [id])

  @@unique([contestId, userId])
}

enum TestCaseResult {
  AC
  FAIL
  TLE
  COMPILATION_ERROR
  PENDING
}

enum SubmissionResult {
  AC
  REJECTED
  PENDING
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum SubmissionStatus {
  PENDING
  COMPILATION_ERROR
  REJECTED
  AC
  TLE
}

enum TestCaseStatus {
  PENDING
  AC
  FAIL
  TLE
} 

